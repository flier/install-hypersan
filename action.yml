name: "Install Hyperscan"
description: "Download and install Hyperscan."
author: "Flier Lu <flier.lu@gmail.com"
branding:
  icon: "download-cloud"
  color: "blue"
inputs:
  hyperscan_version:
    description: "The version of Hyperscan library."
    required: false
    default: "5.4.0"
  pcre_version:
    description: "The version of PCRE library."
    required: false
    default: "8.45"
  src_dir:
    description: "The directory of Hyperscan source."
    required: false
    default: "hyperscan_src"
  build_type:
    description: "Define which kind of build to generate."
    required: false
    default: "RelWithDebInfo"
  build_static_lib:
    description: "Build Hyperscan as a static library."
    required: false
    default: "off"
  build_shared_lib:
    description: "Build Hyperscan as a shared library."
    required: false
    default: "off"
  build_static_and_shared_lib:
    description: "Build both static and shared Hyperscan libs."
    required: false
    default: "off"
  debug_output:
    description: "Enable very verbose debug output."
    required: false
    default: "off"
  install_prefix:
    description: "Install directory for install target"
    required: false
    default: "/usr/local"
  use_cache:
    description: "Allows caching build outputs to improve execution time."
    required: false
    default: "false"
  cache_key:
    description: "An explicit key for restoring and saving the cache"
    required: false
    default: ${{ runner.os }}-build-hyperscan-${{ inputs.hyperscan_version }}-pcre-${{ inputs.pcre_version }}
  upload_artifact:
    description: "Upload and share library between jobs and store data once a workflow is complete."
    required: false
    default: "false"
  artifact_name:
    description: "Upload an artifact as name"
    required: false
    default: ${{ runner.os }}-hyperscan-${{ inputs.hyperscan_version }}-pcre-${{ inputs.pcre_version }}
outputs:
  cache-hit:
    description: "A boolean value to indicate an exact match was found for the cache key"
    value: ${{ steps.cache-hyperscan.outputs.cache-hit }}
  cache-key:
    description: "An explicit key for restoring and saving the cache"
    value: ${{ input.cache_key }}
  artifact_name:
    description: "Upload an artifact as name"
    value: ${{ inputs.artifact_name }}
runs:
  using: "composite"
  steps:
    - name: Cache Hyperscan library
      if: input.use_cache
      id: cache-hyperscan
      uses: actions/cache@v2
      env:
        cache-name: cache-hyperscan-library
      with:
        path: ${{ install.install_prefix }}
        key: ${{ input.cache_key }}

    - name: Download Hyperscan ${{ inputs.hyperscan_version }}
      if: ${{ !input.use_cache || !steps.cache-hyperscan.outputs.cache-hit }}
      id: download-hyperscan
      shell: bash
      run: |
        wget https://github.com/intel/hyperscan/archive/refs/tags/v${{ inputs.hyperscan_version }}.tar.gz -O hyperscan.tar.gz
        mkdir ${{ inputs.src_dir }}
        tar xf hyperscan.tar.gz -C ${{ inputs.src_dir }} --strip-components=1
        rm hyperscan.tar.gz

    - name: Download PCRE ${{ inputs.pcre_version }}
      if: ${{ !input.use_cache || !steps.cache-hyperscan.outputs.cache-hit }}
      id: download-pcre
      shell: bash
      run: |
        wget https://sourceforge.net/projects/pcre/files/pcre/${{ inputs.pcre_version }}/pcre-${{ inputs.pcre_version }}.tar.gz/download -O pcre.tar.gz
        mkdir ${{ inputs.src_dir }}/pcre
        tar xf pcre.tar.gz -C ${{ inputs.src_dir }}/pcre --strip-components=1
        rm pcre.tar.gz

    - name: Build Hyperscan
      if: ${{ !input.use_cache || !steps.cache-hyperscan.outputs.cache-hit }}
      id: build-hyperscan
      working-directory: ${{ inputs.src_dir }}
      shell: bash
      run: |
        mkdir build
        cd build
        cmake -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} \
          -DBUILD_STATIC_LIBS=${{ inputs.build_static_lib }} \
          -DBUILD_SHARED_LIBS=${{ inputs.build_shared_lib }} \
          -DBUILD_STATIC_AND_SHARED=${{ inputs.build_static_and_shared_lib }} \
          -DDEBUG_OUTPUT=${{ inputs.debug_output }} \
          -DCMAKE_INSTALL_PREFIX=${{ inputs.install_prefix }} \
          ..
        ninja

    - name: Install Hyperscan
      if: ${{ !input.use_cache || !steps.cache-hyperscan.outputs.cache-hit }}
      id: install-hyperscan
      working-directory: ${{ inputs.src_dir }}/build
      shell: bash
      run: |
        ninja install
        cp -v lib/lib*.a ${{ inputs.install_prefix }}/lib/

    - name: Upload Artifact
      if: ${{ input.upload_artifact && !steps.cache-hyperscan.outputs.cache-hit }}
      uses: actions/upload-artifact@v2
      with:
        name: ${{ input.artifact_name }}
        path: ${{ inputs.install_prefix }}
        if-no-files-found: error
