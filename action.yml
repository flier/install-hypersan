name: "Install Hyperscan"
description: "Download and install Hyperscan."
author: "Flier Lu <flier.lu@gmail.com"
branding:
  icon: "download-cloud"
  color: "blue"
inputs:
  hyperscan_version:
    description: "The version of Hyperscan library."
    required: false
    default: "5.4.2"
  pcre_version:
    description: "The version of PCRE library."
    required: false
    default: "8.45"
  vectorscan:
    description: "Use Verctorscan instead Hyperscan"
    required: false
    default: "false"
  install_dependencies:
    description: "Install dependencies for building."
    required: false
    default: "true"
  src_dir:
    description: "The directory of Hyperscan source."
    required: false
    default: "hyperscan_src"
  build_type:
    description: "Define which kind of build to generate."
    required: false
    default: "RelWithDebInfo"
  build_static_lib:
    description: "Build Hyperscan as a static library."
    required: false
    default: "on"
  build_shared_lib:
    description: "Build Hyperscan as a shared library."
    required: false
    default: "off"
  build_static_and_shared_lib:
    description: "Build both static and shared Hyperscan libs."
    required: false
    default: "off"
  debug_output:
    description: "Enable very verbose debug output."
    required: false
    default: "off"
  install_prefix:
    description: "Install directory for install target"
    required: false
    default: "/usr/local"
  use_cache:
    description: "Allows caching build outputs to improve execution time."
    required: false
    default: "false"
  cache_key:
    description: "An explicit key for restoring and saving the cache."
    required: false
    default: ""
  upload_artifact:
    description: "Upload and share library between jobs and store data once a workflow is complete."
    required: false
    default: "false"
outputs:
  cache-hit:
    description: "A boolean value to indicate an exact match was found for the cache key"
    value: ${{ steps.cache-hyperscan.outputs.cache-hit }}
runs:
  using: "composite"
  steps:
    - name: Cache Hyperscan library
      if: ${{ inputs.use_cache }}
      id: cache-hyperscan
      uses: actions/cache@v4
      env:
        cache-name: cache-hyperscan-library
      with:
        path: ${{ inputs.install_prefix }}
        key: ${{ inputs.cache_key }}

    - name: Install Linux runtime dependencies
      if: inputs.install_dependencies && runner.os == 'Linux'
      shell: bash
      run: |
        echo "::group::Install Linux runtime dependencies"
        sudo apt-get update
        sudo apt-get install -yq libpcap-dev pkg-config
        echo "::endgroup::"

    - name: Install Linux build dependencies
      if: ${{ inputs.install_dependencies && runner.os == 'Linux' && ( !inputs.use_cache || !steps.cache-hyperscan.outputs.cache-hit ) }}
      shell: bash
      run: |
        echo "::group::Install Linux build dependencies"
        sudo apt-get install -yq build-essential ca-certificates cmake libboost-dev libbz2-dev \
          ninja-build python2.7 ragel wget zlib1g-dev
        echo "::endgroup::"

    - name: Install MacOS runtime dependencies
      if: inputs.install_dependencies && runner.os == 'macOS'
      shell: bash
      env:
        HOMEBREW_NO_INSTALL_CLEANUP: "1"
      run: |
        echo "::group::Install MacOS runtime dependencies"
        brew install --overwrite pkg-config libpcap
        echo "::endgroup::"

    - name: Install MacOS build dependencies
      if: ${{ inputs.install_dependencies && runner.os == 'macOS' && ( !inputs.use_cache || !steps.cache-hyperscan.outputs.cache-hit ) }}
      shell: bash
      env:
        HOMEBREW_NO_INSTALL_CLEANUP: "1"
      run: |
        echo "::group::Install MacOS build dependencies"
        brew install --overwrite ragel cmake boost ninja lzlib wget
        echo "::endgroup::"

    - name: Download Hyperscan ${{ inputs.hyperscan_version }}
      if: ${{ !inputs.vectorscan && (!inputs.use_cache || !steps.cache-hyperscan.outputs.cache-hit) }}
      id: download-hyperscan
      shell: bash
      run: |
        echo "::group::Download Hyperscan ${{ inputs.hyperscan_version }}"
        wget https://github.com/intel/hyperscan/archive/refs/tags/v${{ inputs.hyperscan_version }}.tar.gz -O hyperscan.tar.gz
        mkdir ${{ inputs.src_dir }}
        tar xf hyperscan.tar.gz -C ${{ inputs.src_dir }} --strip-components=1
        rm hyperscan.tar.gz
        echo "::endgroup::"

    - name: Download Vectorscan ${{ inputs.hyperscan_version }}
      if: ${{ inputs.vectorscan && (!inputs.use_cache || !steps.cache-hyperscan.outputs.cache-hit) }}
      id: download-hyperscan
      shell: bash
      run: |
        echo "::group::Download Vectorscan ${{ inputs.hyperscan_version }}"
        wget https://github.com/VectorCamp/vectorscan/archive/refs/tags/v${{ inputs.hyperscan_version }}.tar.gz -O vectorscan.tar.gz
        mkdir ${{ inputs.src_dir }}
        tar xf vectorscan.tar.gz -C ${{ inputs.src_dir }} --strip-components=1
        rm vectorscan.tar.gz
        echo "::endgroup::"

    - name: Download PCRE ${{ inputs.pcre_version }}
      if: ${{ !inputs.use_cache || !steps.cache-hyperscan.outputs.cache-hit }}
      id: download-pcre
      shell: bash
      run: |
        echo "::group::Download PCRE ${{ inputs.pcre_version }}"
        wget https://sourceforge.net/projects/pcre/files/pcre/${{ inputs.pcre_version }}/pcre-${{ inputs.pcre_version }}.tar.gz/download -O pcre.tar.gz
        mkdir ${{ inputs.src_dir }}/pcre
        tar xf pcre.tar.gz -C ${{ inputs.src_dir }}/pcre --strip-components=1
        rm pcre.tar.gz
        echo "::endgroup::"

    - name: Build Hyperscan ${{ inputs.hyperscan_version }}
      if: ${{ !inputs.use_cache || !steps.cache-hyperscan.outputs.cache-hit }}
      id: build-hyperscan
      working-directory: ${{ inputs.src_dir }}
      env:
        LC_ALL: C
      shell: bash
      run: |
        echo "::group::Build Hyperscan ${{ inputs.hyperscan_version }} with PCRE ${{ inputs.pcre_version }}"
        mkdir build
        cd build
        cmake -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} \
          -DBUILD_STATIC_LIBS=${{ inputs.build_static_lib }} \
          -DBUILD_SHARED_LIBS=${{ inputs.build_shared_lib }} \
          -DBUILD_STATIC_AND_SHARED=${{ inputs.build_static_and_shared_lib }} \
          -DDEBUG_OUTPUT=${{ inputs.debug_output }} \
          -DCMAKE_INSTALL_PREFIX=${{ inputs.install_prefix }} \
          ..
        ninja
        echo "::endgroup::"

    - name: Install Hyperscan ${{ inputs.hyperscan_version }}
      if: ${{ !inputs.use_cache || !steps.cache-hyperscan.outputs.cache-hit }}
      id: install-hyperscan
      working-directory: ${{ inputs.src_dir }}/build
      shell: bash
      run: |
        echo "::group::Install Hyperscan ${{ inputs.hyperscan_version }} with PCRE ${{ inputs.pcre_version }}"
        ninja install
        cp -v lib/lib*.a ${{ inputs.install_prefix }}/lib/
        echo "::endgroup::"

    - name: Upload Artifact
      if: ${{ inputs.upload_artifact && !steps.cache-hyperscan.outputs.cache-hit }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ runner.os }}-hyperscan-${{ inputs.vectorscan }}-${{ inputs.hyperscan_version }}-pcre-${{ inputs.pcre_version }}
        path: ${{ inputs.install_prefix }}
        if-no-files-found: error
